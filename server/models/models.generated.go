// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"bytes"
	"fmt"
	"io"
	"strconv"

	"finawise.app/server/models/types"
)

type Account struct {
	ID       int64          `json:"id"`
	GroupID  int64          `json:"group_id"`
	Email    string         `json:"email"`
	Fullname string         `json:"fullname"`
	Group    Group          `json:"group"`
	Summary  AccountSummary `json:"summary"`
	Passhash string         `json:"passhash"`
}

type AccountSummary struct {
	Income  float64 `json:"income"`
	Expense float64 `json:"expense"`
}

type Category struct {
	ID           types.ID      `json:"id"`
	GroupID      int64         `json:"group_id"`
	Name         string        `json:"name"`
	Type         CategoryType  `json:"type"`
	Emoji        string        `json:"emoji"`
	Color        string        `json:"color"`
	Group        Group         `json:"group"`
	Transactions []Transaction `json:"transactions"`
}

type CreateAccount struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Fullname string `json:"fullname"`
}

type CreateCategory struct {
	Name  string       `json:"name"`
	Type  CategoryType `json:"type"`
	Emoji string       `json:"emoji"`
	Color string       `json:"color"`
}

type CreateTransaction struct {
	CategoryID types.ID        `json:"cid"`
	Title      string          `json:"title"`
	Amount     float64         `json:"amount"`
	Timestamp  types.Timestamp `json:"timestamp"`
}

type Group struct {
	ID int64 `json:"id"`
}

type Mutation struct {
}

type Query struct {
}

type Transaction struct {
	ID         types.ID        `json:"id"`
	CategoryID types.ID        `json:"category_id"`
	AccountID  int64           `json:"account_id"`
	Title      string          `json:"title"`
	Amount     float64         `json:"amount"`
	Timestamp  types.Timestamp `json:"timestamp"`
	Category   Category        `json:"category"`
	Account    Account         `json:"account"`
}

type CategoryType string

const (
	CategoryTypeIncome  CategoryType = "INCOME"
	CategoryTypeExpense CategoryType = "EXPENSE"
)

var AllCategoryType = []CategoryType{
	CategoryTypeIncome,
	CategoryTypeExpense,
}

func (e CategoryType) IsValid() bool {
	switch e {
	case CategoryTypeIncome, CategoryTypeExpense:
		return true
	}
	return false
}

func (e CategoryType) String() string {
	return string(e)
}

func (e *CategoryType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CategoryType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CategoryType", str)
	}
	return nil
}

func (e CategoryType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *CategoryType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e CategoryType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
