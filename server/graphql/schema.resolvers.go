package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.71

import (
	"context"

	"finawise.app/server/models"
	"finawise.app/server/models/types"
	"finawise.app/server/repository"
	"finawise.app/server/services/account"
)

// Summary is the resolver for the summary field.
func (r *accountResolver) Summary(ctx context.Context, obj *models.Account) (models.AccountSummary, error) {
	return r.Repository.GetAccountSummary(obj.ID)
}

// Category is the resolver for the category field.
func (r *budgetResolver) Category(ctx context.Context, obj *models.Budget) (models.Category, error) {
	return r.Repository.GetCategory(obj.CategoryID)
}

// Budget is the resolver for the budget field.
func (r *categoryResolver) Budget(ctx context.Context, obj *models.Category) (*models.Budget, error) {
	b, err := r.Repository.GetBudget(obj.ID)
	if err == repository.ErrNoRows {
		return nil, nil
	}
	return &b, err
}

// Transactions is the resolver for the transactions field.
func (r *categoryResolver) Transactions(ctx context.Context, obj *models.Category) ([]models.Transaction, error) {
	session := ctx.Value("session").(account.Session)
	return r.Repository.ListTransactions(session.AccountID, &obj.ID, nil)
}

// CreateAccount is the resolver for the createAccount field.
func (r *mutationResolver) CreateAccount(ctx context.Context, a CreateAccount) (models.Account, error) {
	return r.AccountService.Register(a.Email, a.Password, a.Fullname)
}

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, c CreateCategory) (cat models.Category, err error) {
	session := ctx.Value("session").(account.Session)
	cat = models.Category{
		GroupID: session.GroupID,
		Name:    c.Name,
		Type:    c.Type,
		Emoji:   c.Emoji,
		Color:   c.Color,
	}
	id, err := r.Repository.CreateCategory(cat)
	if err != nil {
		return
	}
	cat.ID = id
	return
}

// CreateTransaction is the resolver for the createTransaction field.
func (r *mutationResolver) CreateTransaction(ctx context.Context, t CreateTransaction) (txn models.Transaction, err error) {
	session := ctx.Value("session").(account.Session)
	txn = models.Transaction{
		CategoryID: t.CategoryID,
		AccountID:  session.AccountID,
		Title:      t.Title,
		Amount:     t.Amount,
		Timestamp:  t.Timestamp,
	}
	id, err := r.Repository.CreateTransaction(txn)
	if err != nil {
		return
	}
	txn.ID = id
	return
}

// CreateBudget is the resolver for the createBudget field.
func (r *mutationResolver) CreateBudget(ctx context.Context, b CreateBudget) (bud models.Budget, err error) {
	bud = models.Budget{
		CategoryID: b.CategoryID,
		Amount:     b.Amount,
	}
	err = r.Repository.CreateBudget(bud)
	return
}

// Account is the resolver for the account field.
func (r *queryResolver) Account(ctx context.Context) (models.Account, error) {
	session := ctx.Value("session").(account.Session)
	return r.Repository.GetAccount(session.AccountID)
}

// Category is the resolver for the category field.
func (r *queryResolver) Category(ctx context.Context, id types.ID) (models.Category, error) {
	return r.Repository.GetCategory(id)
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context, ct *models.CategoryType) ([]models.Category, error) {
	session := ctx.Value("session").(account.Session)
	return r.Repository.GetCategories(session.GroupID, ct)
}

// Transaction is the resolver for the transaction field.
func (r *queryResolver) Transaction(ctx context.Context, id types.ID) (models.Transaction, error) {
	return r.Repository.GetTransaction(id)
}

// Transactions is the resolver for the transactions field.
func (r *queryResolver) Transactions(ctx context.Context, ct *models.CategoryType) ([]models.Transaction, error) {
	session := ctx.Value("session").(account.Session)
	return r.Repository.ListTransactions(session.AccountID, nil, ct)
}

// Budget is the resolver for the budget field.
func (r *queryResolver) Budget(ctx context.Context, cid types.ID) (models.Budget, error) {
	return r.Repository.GetBudget(cid)
}

// Budgets is the resolver for the budgets field.
func (r *queryResolver) Budgets(ctx context.Context) ([]models.Budget, error) {
	session := ctx.Value("session").(account.Session)
	return r.Repository.GetBudgets(session.GroupID)
}

// Category is the resolver for the category field.
func (r *transactionResolver) Category(ctx context.Context, obj *models.Transaction) (models.Category, error) {
	return r.Repository.GetCategory(obj.CategoryID)
}

// Account returns AccountResolver implementation.
func (r *Resolver) Account() AccountResolver { return &accountResolver{r} }

// Budget returns BudgetResolver implementation.
func (r *Resolver) Budget() BudgetResolver { return &budgetResolver{r} }

// Category returns CategoryResolver implementation.
func (r *Resolver) Category() CategoryResolver { return &categoryResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Transaction returns TransactionResolver implementation.
func (r *Resolver) Transaction() TransactionResolver { return &transactionResolver{r} }

type accountResolver struct{ *Resolver }
type budgetResolver struct{ *Resolver }
type categoryResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type transactionResolver struct{ *Resolver }
